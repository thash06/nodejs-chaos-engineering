"use strict";

require("core-js/modules/es.array.concat");

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _express = _interopRequireDefault(require("express"));

var _morgan = _interopRequireDefault(require("morgan"));

var _cors = _interopRequireDefault(require("cors"));

var _jsend = _interopRequireDefault(require("jsend"));

var _helpers = require("./helpers");

var _config = _interopRequireDefault(require("./config"));

var _middlewares = require("./middlewares");

var _chaosEngineering = require("./api/chaos-engineering");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Essential globals
var app = (0, _express["default"])(); //  Initialize global application middlewares

app.use((0, _cors["default"])());
app.use((0, _morgan["default"])('combined'));
app.use(_bodyParser["default"].urlencoded({
  extended: true
}));
app.use(_bodyParser["default"].json({
  type: 'application/json'
}));
app.use(_jsend["default"].middleware);
app.use(_middlewares.rateLimiter); // Initialize API routing

app.use('/offerings', _chaosEngineering.chaosRouter);
app.listen(_config["default"].APP.PORT, function () {
  _helpers.logger.info("..........Starting Watchtower on  port ".concat(_config["default"].APP.PORT));
}); // // Initialize Global Error Handlers

app.use(_middlewares.errorHandler);
process.on('unhandledRejection', function (reason, promise) {
  throw reason;
});
process.on('uncaughtException', function (error) {
  _helpers.logger.error("Uncaught Exception: ".concat(500, " - ", error.message, ", Stack: ").concat(error.stack)); // process.exit(1);

});
process.on('SIGINT', function () {
  _helpers.logger.info('Shutting down!');

  process.exit();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInR5cGUiLCJqc2VuZCIsIm1pZGRsZXdhcmUiLCJyYXRlTGltaXRlciIsImNoYW9zUm91dGVyIiwibGlzdGVuIiwiY29uZmlnIiwiQVBQIiwiUE9SVCIsImxvZ2dlciIsImluZm8iLCJlcnJvckhhbmRsZXIiLCJwcm9jZXNzIiwib24iLCJyZWFzb24iLCJwcm9taXNlIiwiZXJyb3IiLCJtZXNzYWdlIiwic3RhY2siLCJleGl0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFHQTtBQUNBLElBQU1BLEdBQUcsR0FBRywwQkFBWixDLENBRUE7O0FBQ0FBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHVCQUFSO0FBQ0FELEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHdCQUFPLFVBQVAsQ0FBUjtBQUNBRCxHQUFHLENBQUNDLEdBQUosQ0FDRUMsdUJBQVdDLFVBQVgsQ0FBc0I7QUFDcEJDLEVBQUFBLFFBQVEsRUFBRTtBQURVLENBQXRCLENBREY7QUFLQUosR0FBRyxDQUFDQyxHQUFKLENBQ0VDLHVCQUFXRyxJQUFYLENBQWdCO0FBQ2RDLEVBQUFBLElBQUksRUFBRTtBQURRLENBQWhCLENBREY7QUFLQU4sR0FBRyxDQUFDQyxHQUFKLENBQVFNLGtCQUFNQyxVQUFkO0FBQ0FSLEdBQUcsQ0FBQ0MsR0FBSixDQUFRUSx3QkFBUixFLENBRUE7O0FBQ0FULEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFlBQVIsRUFBc0JTLDZCQUF0QjtBQUVBVixHQUFHLENBQUNXLE1BQUosQ0FBV0MsbUJBQU9DLEdBQVAsQ0FBV0MsSUFBdEIsRUFBNEIsWUFBTTtBQUNoQ0Msa0JBQU9DLElBQVAsa0RBQXNESixtQkFBT0MsR0FBUCxDQUFXQyxJQUFqRTtBQUNELENBRkQsRSxDQUlBOztBQUNBZCxHQUFHLENBQUNDLEdBQUosQ0FBUWdCLHlCQUFSO0FBQ0FDLE9BQU8sQ0FBQ0MsRUFBUixDQUFXLG9CQUFYLEVBQWlDLFVBQUNDLE1BQUQsRUFBU0MsT0FBVCxFQUFxQjtBQUNwRCxRQUFNRCxNQUFOO0FBQ0QsQ0FGRDtBQUlBRixPQUFPLENBQUNDLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQyxVQUFBRyxLQUFLLEVBQUk7QUFDdkNQLGtCQUFPTyxLQUFQLCtCQUFvQyxHQUFwQyxTQUE2Q0EsS0FBSyxDQUFDQyxPQUFuRCxzQkFBc0VELEtBQUssQ0FBQ0UsS0FBNUUsR0FEdUMsQ0FFdkM7O0FBQ0QsQ0FIRDtBQUtBTixPQUFPLENBQUNDLEVBQVIsQ0FBVyxRQUFYLEVBQXFCLFlBQU07QUFDekJKLGtCQUFPQyxJQUFQLENBQVksZ0JBQVo7O0FBQ0FFLEVBQUFBLE9BQU8sQ0FBQ08sSUFBUjtBQUNELENBSEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBtb3JnYW4gZnJvbSAnbW9yZ2FuJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGpzZW5kIGZyb20gJ2pzZW5kJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGVycm9ySGFuZGxlciB9IGZyb20gJy4vbWlkZGxld2FyZXMnO1xuaW1wb3J0IHsgY2hhb3NSb3V0ZXIgfSBmcm9tICcuL2FwaS9jaGFvcy1lbmdpbmVlcmluZyc7XG5pbXBvcnQgeyByYXRlTGltaXRlciB9IGZyb20gJy4vbWlkZGxld2FyZXMnO1xuXG4vLyBFc3NlbnRpYWwgZ2xvYmFsc1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyAgSW5pdGlhbGl6ZSBnbG9iYWwgYXBwbGljYXRpb24gbWlkZGxld2FyZXNcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UobW9yZ2FuKCdjb21iaW5lZCcpKTtcbmFwcC51c2UoXG4gIGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7XG4gICAgZXh0ZW5kZWQ6IHRydWVcbiAgfSlcbik7XG5hcHAudXNlKFxuICBib2R5UGFyc2VyLmpzb24oe1xuICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9KVxuKTtcbmFwcC51c2UoanNlbmQubWlkZGxld2FyZSk7XG5hcHAudXNlKHJhdGVMaW1pdGVyKTtcblxuLy8gSW5pdGlhbGl6ZSBBUEkgcm91dGluZ1xuYXBwLnVzZSgnL29mZmVyaW5ncycsIGNoYW9zUm91dGVyKTtcblxuYXBwLmxpc3Rlbihjb25maWcuQVBQLlBPUlQsICgpID0+IHtcbiAgbG9nZ2VyLmluZm8oYC4uLi4uLi4uLi5TdGFydGluZyBXYXRjaHRvd2VyIG9uICBwb3J0ICR7Y29uZmlnLkFQUC5QT1JUfWApO1xufSk7XG5cbi8vIC8vIEluaXRpYWxpemUgR2xvYmFsIEVycm9yIEhhbmRsZXJzXG5hcHAudXNlKGVycm9ySGFuZGxlcik7XG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uLCBwcm9taXNlKSA9PiB7XG4gIHRocm93IHJlYXNvbjtcbn0pO1xuXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIGVycm9yID0+IHtcbiAgbG9nZ2VyLmVycm9yKGBVbmNhdWdodCBFeGNlcHRpb246ICR7NTAwfSAtICR7ZXJyb3IubWVzc2FnZX0sIFN0YWNrOiAke2Vycm9yLnN0YWNrfWApO1xuICAvLyBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxucHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xuICBsb2dnZXIuaW5mbygnU2h1dHRpbmcgZG93biEnKTtcbiAgcHJvY2Vzcy5leGl0KCk7XG59KTtcbiJdfQ==